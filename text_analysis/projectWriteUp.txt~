For this project, I used text analysis to find out certain things about the series A Song of Ice and Fire, by George R.R. Martin. By using pattern.sentiment, dictionaries, and plot.ly, I was able to find the top 30 words, character mentions, place mentions, and sentiment analysis by line and by chapter. To do this, I downloaded epub files of each book and converted them to text files, then opened them in my Python program. The goal of this project was to discover and observe similarities and interesting patterns in Martin's books.

I divided my code into a series of functions, in order to increase the modular functionality and make it easier to debug. Essentially, the code works by first breaking down the text file down into lines to determine chapters, then moving through each line to create strings of words. After removing the punctuation and titlecasing, the words are stored in three dictionaries in order to find: 1) maximum word frequencies, 2) character mentions, and 3) place mentions. These can be passed onto different functions depending on which one is called. Top words takes the dictionary, breaking it up into keys and values, finds the maximum value, removes the relating key and value from the dictionaries, and loops through, creating a new dictionary with the highest density words only. Plot frequency takes this in order to plot bar graphs of the different word counts. 

The more difficult section of the code to write was the ilne_sentiment function, which characterized the sentiment of each line and placed it into separate dictionaries, one with line number and sentiment, and the other with chapter number and number of sentiment group (very happy, neutral, etc.). Initially, these dictionaries were both lists, but I decided to make them dictionaries because it was significantly more simple to call them and keep a tally of a specific key in a for loop. I also made many changes in breaking up my code into functions, but eventually I ended up with my final code. In line_sentiment, the sentiment of each line is evaluated, and the line and its value are placed in the corresponding sentiment dictionary (in order to be able to graph in different colors, which couldn't be done with one dictionary). Then, the chapter-lines dictionary was compared with these ones to count the occurences of each sentiment in each chapter. Finally, either the line-sentiment dictionary or the chapter-sentiment dictionary can be passed to the sentiment_by_lines function in order to be graphed. 

The results are in the PDF titled 'Results.pdf'
